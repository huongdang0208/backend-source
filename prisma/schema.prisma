// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    email    String    @unique
    password String
    username String
    role     String
    orders   Order[]
    Session  Session[]
}

model Session {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    userId Int
    user   User @relation(fields: [userId], references: [id])

    accessToken  String
    refreshToken String
}

// onDelete: Cascad mean when parent model of this model is deleted, in case when User model is deleted, the Bookmark is delete

model Order {
    orderId          Int    @id @default(autoincrement())
    categoryId       Int
    categoryName     String
    receiverLocation String
    receiverPhone    String
    quantity         Int
    totalPrice       Int
    orderStatus      String

    ownerId Int
    owner   User @relation(fields: [ownerId], references: [id])

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Blog {
    blog_id     Int    @id @default(autoincrement())
    title       String
    description String

    images    File @relation(fields: [images_id], references: [file_id])
    images_id Int

    category CategoriesOnPosts[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Category {
    category_id Int @id @default(autoincrement())

    category_name      String
    data               Data?
    detail_description String
    instruction        String
    images             String
    category_status    String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    blog CategoriesOnPosts[]
}

model CategoriesOnPosts {
    blog       Blog     @relation(fields: [blogId], references: [blog_id])
    blogId     Int
    category   Category @relation(fields: [categoryId], references: [category_id])
    categoryId Int

    @@id([blogId, categoryId])
}

model Data {
    data_id Int @id @default(autoincrement())

    size   Int?
    weight Int?
    power  Int?

    category    Category @relation(fields: [category_id], references: [category_id])
    category_id Int      @unique
}

model File {
    file_id  Int    @id @default(autoincrement())
    filename String
    size     Int
    mimetype String
    path     String
    cdn_path String

    blog Blog[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}
